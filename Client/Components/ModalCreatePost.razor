<div class="modal fade show d-block bg-half-black" id="staticBackdrop" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel">Create post</h5>
                <button @onclick="() => OnClickButtonClose.InvokeAsync(_createdPost)" type="button" class="btn-close" aria-label="Close"></button>
            </div>

            <EditForm Model="_postToCreate" OnValidSubmit="CreatePostAsync">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="title" class="form-label">Title</label>
                        <InputText @bind-Value="_postToCreate.Title" class="form-control" id="title" />
                    </div>

                    <div class="mb-3">
                        <label for="content" class="form-label">Content</label>
                        <InputTextArea @bind-Value="_postToCreate.Content" class="form-control" id="content" />
                    </div>

                    <DataAnnotationsValidator />
                    <ValidationSummary />
                </div>
                <div class="modal-footer">
                    <button @onclick="() => OnClickButtonClose.InvokeAsync(_createdPost)" type="button" class="btn btn-secondary">Cancel</button>
                    <button type="submit" class="btn btn-success">Create</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<Post?> OnClickButtonClose { get; set; }

#pragma warning disable CS8618
    [Inject]
    protected HttpClient HttpClient { get; set; }

    [Inject]
    protected IJSRuntime JsRuntime { get; set; }
#pragma warning restore CS8618

    private Post _postToCreate = new()
    {
        PostId = 0,
        Title = "Post title",
        Content = "Post content"
    };

    private Post? _createdPost = null;

    private async Task CreatePostAsync()
    {
        Console.WriteLine($"CreatePostAsync | title: {_postToCreate.Title} | content: {_postToCreate.Content}");

        HttpResponseMessage response = await HttpClient.PostAsJsonAsync<Post>(APIEndpoints.PostsCreate, _postToCreate);

        if (response.IsSuccessStatusCode)
        {
            _createdPost = await response.Content.ReadFromJsonAsync<Post>();

            if (_createdPost != null)
            {
                await JsRuntime.InvokeVoidAsync("alert", "Post creation successful. Close the modal to see it in the table.");
            }
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Post creation failed.");
        }
    }
}
